# ~/.zshrc: executed by zsh(1) for non-login shells.

# This is copied from the default .zshrc when I pushed (2)
# Set up the prompt

# autoload -Uz promptinit
# promptinit
# prompt adam1

setopt histignorealldups sharehistory append_history

# Use emacs keybindings even if our EDITOR is set to vi
bindkey -e

# Keep 1000 lines of history within the shell and save it to ~/.zsh_history:
HISTSIZE=1000
SAVEHIST=1000
HISTFILE=~/.zsh_history

# Use modern completion system
autoload -Uz compinit
compinit

zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _correct _approximate
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' menu select=2
eval "$(dircolors -b)"
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'
# zstyle ':completion:*' menu select=long
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose false

zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'

# the rest comes from .bashrc and I have no idea what I'm doing
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
# shopt -s histappend

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# emacs terminal
[[ $EMACS = t ]] && unsetopt zle

# some more ls aliases
alias ll='ls -l'
alias la='ls -A'
alias l='ls -CF'
alias roxterm='roxterm -T 5h3ll'
alias sl='sl -aF'

# some file management aliases
# alias cp='cp -v'
# alias rm='rm -v'
# alias mv='mv -v'
# alias ln='ln -v'

#  SETUP CONSTANTS
#  Bunch-o-predefined colors.  Makes reading code easier than escape sequences.
#  I don't remember where I found this.  o_O
#  This is also a messy port to zsh using print everywhere, is there a better way to do this?

# Reset
Color_Off=$(echo "%{\e[0m%}")       # Text Reset

# Regular Colors
Black=$(echo "%{\e[0;30m%}")        # Black
Red=$(echo "%{\e[0;31m%}")          # Red
Green=$(echo "%{\e[0;32m%}")        # Green
Yellow=$(echo "%{\e[0;33m%}")       # Yellow
Blue=$(echo "%{\e[0;34m%}")         # Blue
Purple=$(echo "%{\e[0;35m%}")       # Purple
Cyan=$(echo "%{\e[0;36m%}")         # Cyan
White=$(echo "%{\e[0;37m%}")        # White

# Bold
BBlack=$(echo "%{\e[1;30m%}")       # Black
BRed=$(echo "%{\e[1;31m%}")         # Red
BGreen=$(echo "%{\e[1;32m%}")       # Green
BYellow=$(echo "%{\e[1;33m%}")      # Yellow
BBlue=$(echo "%{\e[1;34m%}")        # Blue
BPurple=$(echo "%{\e[1;35m%}")      # Purple
BCyan=$(echo "%{\e[1;36m%}")        # Cyan
BWhite=$(echo "%{\e[1;37m%}")       # White

# Underline
UBlack=$(echo "%{\e[4;30m%}")       # Black
URed=$(echo "%{\e[4;31m%}")         # Red
UGreen=$(echo "%{\e[4;32m%}")       # Green
UYellow=$(echo "%{\e[4;33m%}")      # Yellow
UBlue=$(echo "%{\e[4;34m%}")        # Blue
UPurple=$(echo "%{\e[4;35m%}")      # Purple
UCyan=$(echo "%{\e[4;36m%}")        # Cyan
UWhite=$(echo "%{\e[4;37m%}")       # White

# Background
On_Black=$(echo "%{\e[40m%}")       # Black
On_Red=$(echo "%{\e[41m%}")         # Red
On_Green=$(echo "%{\e[42m%}")       # Green
On_Yellow=$(echo "%{\e[43m%}")      # Yellow
On_Blue=$(echo "%{\e[44m%}")        # Blue
On_Purple=$(echo "%{\e[45m%}")      # Purple
On_Cyan=$(echo "%{\e[46m%}")        # Cyan
On_White=$(echo "%{\e[47m%}")       # White

# High Intensty
IBlack=$(echo "%{\e[0;90m%}")       # Black
IRed=$(echo "%{\e[0;91m%}")         # Red
IGreen=$(echo "%{\e[0;92m%}")       # Green
IYellow=$(echo "%{\e[0;93m%}")      # Yellow
IBlue=$(echo "%{\e[0;94m%}")        # Blue
IPurple=$(echo "%{\e[0;95m%}")      # Purple
ICyan=$(echo "%{\e[0;96m%}")        # Cyan
IWhite=$(echo "%{\e[0;97m%}")       # White

# Bold High Intensty
BIBlack=$(echo "%{\e[1;90m%}")      # Black
BIRed=$(echo "%{\e[1;91m%}")        # Red
BIGreen=$(echo "%{\e[1;92m%}")      # Green
BIYellow=$(echo "%{\e[1;93m%}")     # Yellow
BIBlue=$(echo "%{\e[1;94m%}")       # Blue
BIPurple=$(echo "%{\e[1;95m%}")     # Purple
BICyan=$(echo "%{\e[1;96m%}")       # Cyan
BIWhite=$(echo "%{\e[1;97m%}")      # White

# High Intensty backgrounds
On_IBlack=$(echo "%{\e[0;100m%}")   # Black
On_IRed=$(echo "%{\e[0;101m%}")     # Red
On_IGreen=$(echo "%{\e[0;102m%}")   # Green
On_IYellow=$(echo "%{\e[0;103m%}")  # Yellow
On_IBlue=$(echo "%{\e[0;104m%}")    # Blue
On_IPurple=$(echo "%{\e[10;95m%}")  # Purple
On_ICyan=$(echo "%{\e[0;106m%}")    # Cyan
On_IWhite=$(echo "%{\e[0;107m%}")   # White

# Various variables you might want for your PS1 prompt instead
Time12h="\T"
Time12a="\@"
Time24h="%*"
Time24a="\A"
PathShort="\w"
PathFull="\W"
NewLine="\n"
Jobs="\j"

# if the command-not-found package is installed, use it
if [ -x /usr/lib/command-not-found -o -x /usr/share/command-not-found/command-not-found ]; then
    function command_not_found_handle {
        # check because c-n-f could've been removed in the meantime
        if [ -x /usr/lib/command-not-found ]; then
            /usr/bin/python /usr/lib/command-not-found -- "$1"
            return $?
        elif [ -x /usr/share/command-not-found/command-not-found ]; then
            /usr/bin/python /usr/share/command-not-found/command-not-found -- "$1"
            return $?
        else
            printf "%s: command not found\n" "$1" >&2
            return 127
        fi
    }
fi

# source the required git-prompt.sh
source ~/.git-prompt.sh

gitprompt()
{
    git status | grep "nothing to commit" 1>/dev/null 2>/dev/null
    if [ $? -eq 0 ]; then
        # Clean repo
        echo -n " $Green$(__git_ps1 "(%s)")"
    else
        # Changes to working tree
        echo -n " $Red$(__git_ps1 "{%s}")"
    fi
    echo $Color_Off
}

svnprompt()
{
    local rv=$(__svn_rev)
    local cnt=$(svn status | wc -c)

    if [ "$cnt" -eq "0" ]; then
        echo -n " $Green"\[$Green$rv\]
    else
        echo -n " $Red"\[$Red$rv\]
    fi
    echo $Color_Off
}

__svn_rev()
{
    local r=$(svn info | awk '/Revision:/ {print $2}')

    if [ ! -z $SVN_SHOWDIRTYSTATE ]; then
        local svnst flag
        svnst=$(svn status | grep '^\s*[?ACDMR?!]')
        [ -z "$svnst" ] && flag=*
        r=$r$flag
    fi
    echo $r
}

repoprompt()
{
    git branch &>/dev/null
    local gb=$?
    svn info &>/dev/null
    local si=$?

    if [ $gb -eq 0 ]; then
        echo "$(gitprompt)"
    elif [ $si -eq 0 ]; then
        echo "$(svnprompt)"
    else
        # do nothing
    fi
}

precmd()
{
    local EXIT=$(printf "%03d" $?)
    local DERP=""
    if [ $EXIT -eq "000" ]; then
        DERP=$Green$EXIT
    else
        DERP=$Red$EXIT
    fi
    DERP=$DERP$IBlack

    export PS1=$IBlack'['$DERP']'"[%D{%H:%M:%S}] "$BIYellow"%n@%M"$Color_Off":%~$(repoprompt) "$Cyan'lvl'$Color_Off'('$Red$SHLVL$Color_Off')'$'\n'"%# "
    export RPS1="on "$IPurple$TTY$Color_Off
}

# for correction purposes
setopt correct
export SPROMPT="Correct "$BRed"%R"$Color_Off" to "$BGreen"%r"$Color_Off"? (ynae) "

export EDITOR='vim'

# this lets us use <C-s> for stuff
stty -ixon

# for teh lulz
alias fucking='sudo'

# js sandbox
alias jsc='jrunscript'

# just in case
alias svi='sudo vi'

# svn utilities
# use ./.svnignore to ignore files
alias svnignore='svn propset svn:ignore -F .svnignore .'
# remove unversioned files
alias svnremove='svn status | grep ^\? | cut -c9- | xargs -d \\n rm -rf'

# screw guis, and i will never use emacs so whatever
# alias emacs='emacs -nw'

alias irssi='screen irssi'
