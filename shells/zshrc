# ~/.zshrc: executed by zsh(1) for non-login shells.

# This is copied from the default .zshrc when I pushed (2)
# Set up the prompt

setopt histignorealldups sharehistory append_history

# Use emacs keybindings even if our EDITOR is set to vi
bindkey -e
bindkey "\e[3~"   delete-char           # del
bindkey "\e[5~"   beginning-of-history  # pgup
bindkey "\e[6~"   end-of-history        # pgdn
bindkey "\e[7~"   beginning-of-line     # home
bindkey "\e[8~"   end-of-line           # end
bindkey "\e\e[C"  forward-word          # alt-right
bindkey "\e\e[D"  backward-word         # alt-left

source ~/.zplug/init.zsh
zplug chriskempson/base16-shell, from:github
zplug load --verbose
base16_tomorrow-night

# Keep 4096 lines of history within the shell and save it to ~/.zsh_history:
HISTSIZE=4096
SAVEHIST=4096
HISTFILE=~/.zsh_history

# Use modern completion system
autoload -Uz compinit
compinit

# set a var for dircolors executable
if [ -x /bin/dircolors ]; then
  DIRCOLORS=dircolors
elif [ -x /opt/homebrew/bin/gdircolors ]; then
  DIRCOLORS=gdircolors
fi

# BSD (aka OSX) uses LSCOLORS instead of LS_COLORS from dircolors
export LSCOLORS=ExGxBxDxCxEgEdxbxgxcxd
eval "$($DIRCOLORS -b)"

zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _correct _approximate
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' menu select=2
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'
# zstyle ':completion:*' menu select=long
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose false

zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'

# the rest comes from .bashrc and I have no idea what I'm doing
HISTCONTROL=ignoreboth

# enable color support of ls and also add handy aliases
if [ -n "$DIRCOLORS" ]; then
    test -r ~/.dircolors && eval "$($DIRCOLORS -b ~/.dircolors)" || eval "$($DIRCOLORS -b)"
    alias ls='ls --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# emacs terminal
[[ $EMACS = t ]] && unsetopt zle
[[ $TERM = "dumb" ]] && unsetopt zle

# some more ls aliases
alias ll='ls -l'
alias la='ls -A'
alias lal='ls -Al'
alias l='ls -CF'
alias sl='sl -aF'

# if the command-not-found package is installed, use it
if [ -x /usr/lib/command-not-found -o -x /usr/share/command-not-found/command-not-found ]; then
    function command_not_found_handle {
        # check because c-n-f could've been removed in the meantime
        if [ -x /usr/lib/command-not-found ]; then
            /usr/bin/python /usr/lib/command-not-found -- "$1"
            return $?
        elif [ -x /usr/share/command-not-found/command-not-found ]; then
            /usr/bin/python /usr/share/command-not-found/command-not-found -- "$1"
            return $?
        else
            printf "%s: command not found\n" "$1" >&2
            return 127
        fi
    }
fi

urxvt-switchfont()
{
    # [ -e "$XMOBAR_NOTIFICATION_PIPE" ] && echo "setting urxvt font to: '$1'" > "$XMOBAR_NOTIFICATION_PIPE"
    [[ "$1" == "" ]] || printf '\e]710;%s\007' "$1"
}

# source the required git-prompt.sh
source ~/.git-prompt.sh

gitprompt()
{
    git status | grep "nothing to commit" 1>/dev/null 2>/dev/null
    if [ $? -eq 0 ]; then
        # Clean repo
        echo -n " %F{green}$(__git_ps1 "(%s)")%f"
    else
        # Changes to working tree
        echo -n " %F{red}$(__git_ps1 "{%s}")%f"
    fi
}

svnprompt()
{
    local rv=$(__svn_rev)
    local cnt=$(svn status | wc -c)

    if [ "$cnt" -eq "0" ]; then
        echo -n " %F{green}[$rv]%f"
    else
        echo -n " %F{red}[$rv]%f"
    fi
}

__svn_rev()
{
    local r=$(svn info | awk '/Revision:/ {print $2}')

    if [ ! -z $SVN_SHOWDIRTYSTATE ]; then
        local svnst flag
        svnst=$(svn status | grep '^\s*[?ACDMR?!]')
        [ -z "$svnst" ] && flag=*
        r=$r$flag
    fi
    echo $r
}

repoprompt()
{
    git branch &>/dev/null
    local gb=$?
    svn info &>/dev/null
    local si=$?

    if [ $gb -eq 0 ]; then
        echo "$(gitprompt)"
    elif [ $si -eq 0 ]; then
        echo "$(svnprompt)"
    else
        # do nothing
    fi
}

precmd()
{
    local EXIT=$(printf "%03d" $?)
    local DERP=""
    if [ $EXIT -eq "000" ]; then
        DERP="%F{green}$EXIT%f"
    else
        DERP="%F{red}$EXIT%f"
    fi

    export PROMPT="%F{8}[%f$DERP%F{8}][%D{%H:%M:%S}]%f %B%F{11}%n@%M%f%b%F{white}:%~%f$(repoprompt) %F{cyan}lvl%f%F{white}(%f%F{red}%L%f%F{white})%f"$'\n'"%# "
    export RPROMPT="on %F{magenta}$TTY%f"
}

# for correction purposes
setopt correct
export SPROMPT="Correct "$BRed"%R"$Color_Off" to "$BGreen"%r"$Color_Off"? (ynae) "

export EDITOR='vim'

# this lets us use <C-s> for stuff
stty -ixon

# for teh lulz
alias fucking='sudo'

# js sandbox
alias jsc='jrunscript'

# just in case
alias svi='sudo vi'

# migrate to neovim
alias vim='nvim'

# svn utilities
# use ./.svnignore to ignore files
alias svnignore='svn propset svn:ignore -F .svnignore .'
# remove unversioned files
alias svnremove='svn status | grep ^\? | cut -c9- | xargs -d \\n rm -rf'

# screw guis, and i will never use emacs so whatever
# alias emacs='emacs -nw'

alias irssi='screen irssi'

# set up gpg-agent
unset SSH_AGENT_PID
export SSH_AUTH_SOCK=$XDG_RUNTIME_DIR/gnupg/S.gpg-agent.ssh
export GPG_TTY=$(tty)
