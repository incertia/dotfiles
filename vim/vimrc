"" editing
set ts=2 sw=2 sts=2 et ai number
" set cinoptions=g-1,:0,(0
set cinoptions=g0,:0,(0

" appearance
set t_Co=256 title scrolloff=2 wrap showmatch tw=80
set list listchars=tab:\|\ ,trail:.
set laststatus=2
syntax on

"" other stuff
set matchtime=1
let mapleader="\\"
let localleader=","
set sessionoptions-=options

" latex should be default
let g:tex_flavor = "latex"

function! s:NewScratch(name)
  if (a:name == "")
    tabnew
  else
    execute "tabnew " . a:name
  endif
  setl buftype=nofile
  setl bufhidden=hide
  setl noswapfile
endfunction

command!          NewScratch      :call s:NewScratch("")
command! -nargs=1 OpenScratch     :call s:NewScratch(<f-args>)

" leader command section
nnoremap <silent> <leader>so      :so<SPACE>%<CR>
nnoremap <silent> <leader>vc      :e<SPACE>~/.vim/vimrc<CR>
nnoremap <silent> <leader>la      :e<SPACE>~/texmf/tex/latex/incertia/incertia.sty<CR>
nnoremap <silent> <leader>;       m`A;<ESC>``
nnoremap <silent> <leader>gs      :NewScratch<CR>
nnoremap          <leader>gS      :OpenScratch<SPACE>

nnoremap <silent> <leader>n  :NERDTreeToggle<CR>

" tab bindings
nnoremap <leader>1           1gt
nnoremap <leader>2           2gt
nnoremap <leader>3           3gt
nnoremap <leader>4           4gt
nnoremap <leader>5           5gt
nnoremap <leader>6           6gt
nnoremap <leader>7           7gt
nnoremap <leader>8           8gt
nnoremap <leader>9           9gt
nnoremap <silent> <leader>0  :tablast<CR>

let g:tabmoveleft_cmd  = ":-tabmove\<CR>"
let g:tabmoveright_cmd = ":+tabmove\<CR>"
nnoremap <silent> <leader>hh @=g:tabmoveleft_cmd<CR>
nnoremap <silent> <leader>ll @=g:tabmoveright_cmd<CR>
nnoremap <leader>j           gt
nnoremap <leader>k           gT

" surround.vim
nmap <leader>ds  <Plug>Dsurround
nmap <leader>cs  <Plug>Csurround
nmap <leader>cS  <Plug>CSurround
nmap <leader>ys  <Plug>Ysurround
nmap <leader>yS  <Plug>YSurround
nmap <leader>yss <Plug>Yssurround
nmap <leader>ySs <Plug>YSsurround
nmap <leader>ySS <Plug>YSsurround
xmap <leader>S   <Plug>VSurround
xmap <leader>gS  <Plug>VgSurround

" windowswap
let g:windowswap_map_keys = 0
nnoremap <silent> <leader>ww :call WindowSwap#EasyWindowSwap()<CR>

" tabularize
let g:haskell_tabular = 1
vnoremap a= :Tabularize /=<CR>
vnoremap a; :Tabularize /::<CR>
vnoremap a- :Tabularize /-><CR>

" tab navigation
function! TabSwitch(tabnum)
  call feedkeys(a:tabnum . "gt", "n")
endfunction
command! -nargs=1 TabSwitch :call TabSwitch(<f-args>)
nnoremap <C-x><C-t>          :TabSwitch<SPACE>
nnoremap <C-x>t              :TabSwitch<SPACE>

filetype plugin indent on

"" autocmd stuff
if has("autocmd")
  " Uncomment the following to have Vim jump to the last position when
  " reopening a file
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

  " Set scripts to be executable from the shell
  au BufWritePost * if getline(1) =~ "^#!" | if getline(1) =~ "/bin/" | silent execute "!chmod +x %" | endif | endif
  au BufWritePost * if getline(1) =~ "^#!" | if getline(1) =~ "zsh" | silent execute "setfiletype zsh" | endif | endif

  "" I don't know what this does
  au BufWrite * mkview
  au BufRead * silent loadview

  au BufEnter,WinEnter * call matchadd('ColorColumn', '\%81v', 100)

  " Uncomment the following line to disable auto commenting
  " au FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
  au FileType * setlocal formatoptions+=c formatoptions+=r formatoptions+=o
  au FileType tex setlocal textwidth=80

  " disable haskell-vim omnifunc
  let g:haskellmode_completion_ghc = 0
  let g:necoghc_enable_detailed_browse = 1
  au FileType haskell setlocal omnifunc=necoghc#omnifunc
endif

"folding settings
set foldmethod=indent   " fold based on indent
set foldnestmax=16      " deepest fold is 16 levels
set nofoldenable        " don't fold by default
set foldlevel=100       " yay

" number formats
set nf=alpha,octal,hex
nnoremap <C-x> <nop>
nnoremap <C-d> <C-x>

" split to the right and below
set splitbelow splitright

" map <F1> to deleting trailing whitespace and clearing empty lines
function! KillWhiteThings()
  let save_cursor = getpos(".")
  :silent! %s#\($\n\s*\)\+\%$##
  :silent! %s/\s\+$//g
  call setpos('.', save_cursor)
endfunction

nnoremap <silent> <F1>  :call KillWhiteThings()<CR>
nnoremap <silent> <F2>  :set hlsearch! hlsearch?<CR>
nnoremap <silent> <F3>  :tabonly<CR>
nnoremap <silent> <F4>  :q!<CR>

" reflow bindings
nnoremap Q              gqgq
vnoremap Q              gq

" emacs <C-x><C-c> with prompt is really nice
nnoremap <C-x><C-x>     :confirm qa<CR>

" switch files with arrow keys
nnoremap <DOWN>         :bnext<CR>
nnoremap <UP>           :bprev<CR>

" tabs
nnoremap <C-t>          :tabnew<SPACE>
let g:newtab_command = ":tabnew\<CR>"
nnoremap <C-y>          @=g:newtab_command<CR>
nnoremap <S-TAB>        gt

" map space to executing the q macro for easy qq recording
nnoremap <SPACE>        @q

" who cares about ex mode. map QQ to reflow paragraphs
" nnoremap QQ             gqap
" vnoremap QQ             gq

" save shortcut
inoremap <C-s>          <ESC>:w!<CR>a
nnoremap <C-s>          :w!<CR>

" split workflow
nnoremap <C-h>          <C-w>h
nnoremap <C-j>          <C-w>j
nnoremap <C-k>          <C-w>k
nnoremap <C-l>          <C-w>l
nnoremap <leader>-      <C-w>-
nnoremap <leader>=      <C-w>+
" because we remmaped <C-l>
nnoremap <leader><C-l>  <C-l>

" scroll up to <C-q> (don't need this to be visual block)
nnoremap <C-q>          <C-y>

" this helps with long lines
nnoremap j              gj
nnoremap k              gk
nnoremap gj             j
nnoremap gk             k
vnoremap j              gj
vnoremap k              gk
vnoremap gj             j
vnoremap gk             k

function! Scroll(dir)
  let lines = winheight(0)

  if(a:dir == "up")
    let cmd = "\<C-y>"
  elseif(a:dir == "down")
    let cmd = "\<C-e>"
  else
    let cmd = "\<Esc>"
  endif

  call feedkeys(lines . cmd, "n")
endfunction

"" All of the following settings were taken from Damian Conway
"====[ Make the 81st column stand out ]====================

" EITHER the entire 81st column, full-screen
" highlight ColorColumn ctermbg=magenta
" set colorcolumn=81

" OR ELSE just the 81st column of wide lines
hi ColorColumn ctermbg=white

nnoremap  ;  :
nnoremap  :  ;
vnoremap  ;  :
vnoremap  :  ;
nnoremap    v   <C-V>
nnoremap <C-V>     v
vnoremap    v   <C-V>
vnoremap <C-V>     v

" vim-plug
call plug#begin('~/.vim/plugged')

let g:EclimCompletionMethod = 'omnifunc'

let g:surround_no_mappings = 1
let b:surround_indent = 0
Plug 'flazz/vim-colorschemes'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'wesQ3/vim-windowswap'
Plug 'moll/vim-bbye'

let g:syntastic_python_python_exec = '/usr/bin/python2'
let g:syntastic_python_flake8_exec = '/usr/bin/python2'
let g:syntastic_python_checkers    = ['pylint', 'python']
Plug 'scrooloose/syntastic'
Plug 'sotte/presenting.vim'
Plug 'Shougo/vimproc.vim',          { 'do': 'make' }

nnoremap <silent> <C-p>             :<C-u>CtrlP<CR>
nnoremap <silent> <leader><C-p>     :<C-u>CtrlP<SPACE>$HOME<CR>
Plug 'ctrlpvim/ctrlp.vim',          { 'on': 'CtrlP' }
Plug 'scrooloose/nerdtree',         { 'on': 'NERDTreeToggle' }
Plug 'godlygeek/tabular',           { 'on': 'Tabularize' }

" make sure to load vim-haskell-indent before haskell-vim
let g:ghcmod_type_highlight = "Normal"
Plug 'itchyny/vim-haskell-indent'
Plug 'neovimhaskell/haskell-vim'
Plug 'eagletmt/ghcmod-vim',         { 'for': 'haskell' }
Plug 'eagletmt/neco-ghc',           { 'for': 'haskell' }

Plug 'idris-hackers/idris-vim',     { 'for': 'idris'   }

let g:rust_recommended_style = 0
Plug 'rust-lang/rust.vim',          { 'for': 'rust'    }

Plug 'OmniSharp/omnisharp-vim'

let g:ycm_min_num_of_chars_for_completion = 4
let g:ycm_key_list_select_completion = [ "<Down>", ]
let g:ycm_key_list_previous_completion = [ "<Up>", ]
let g:ycm_confirm_extra_conf = 0
let g:ycm_semantic_triggers = {'haskell' : ['.']}
let g:ycm_rust_src_path = "/usr/local/rust/rustc-1.10.0/src"
Plug 'Valloric/YouCompleteMe'
Plug 'rdnetto/YCM-Generator',       { 'branch': 'stable' }
call plug#end()

if has("autocmd")
  au CompleteDone * pclose
endif

" set the colorscheme
if has("gui_running")
  set background=light
  set guioptions-=T
  set guioptions-=m
  set guifont=DejaVu\ Sans\ Mono\ for\ Powerline\ 9
endif
colorscheme Tomorrow-Night

hi Normal      ctermbg=NONE
hi NonText     ctermbg=NONE
hi LineNr      ctermfg=blue
hi Folded      ctermbg=NONE
hi SpecialKey  ctermbg=NONE
hi VertSplit   ctermbg=NONE
hi SignColumn  ctermbg=NONE
hi SpellBad    cterm=underline ctermbg=NONE ctermfg=red
hi SpellCap    cterm=underline ctermbg=NONE ctermfg=magenta
hi String      ctermbg=NONE ctermfg=cyan
hi ColorColumn ctermbg=white ctermfg=black
hi Special     ctermfg=magenta
hi Label       ctermfg=green
hi Statement   ctermfg=red
hi PreProc     ctermfg=lightcyan
hi cInclude    ctermfg=lightcyan
hi Todo        ctermbg=darkred ctermfg=white

" enable powerline if it exists and we are not in a tty
if (!(&term=~'linux') && isdirectory(expand("~/.vim/powerline"))) || has("gui_running")
  set rtp+=~/.vim/powerline/powerline/bindings/vim/
endif
