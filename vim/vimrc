" editing
set ts=2 sw=2 sts=2 et ai number
set cinoptions=g0,:0,(0
set nohlsearch
set guicursor=

" split to the right and below
set splitbelow splitright

" Required for operations modifying multiple buffers like rename.
set hidden

" menuone: popup even if there is only one match
" noinsert: do not insert selection until accepted
" noselect: do not automatically select
set completeopt+=menuone,noinsert,noselect

" appearance
set title scrolloff=2 wrap showmatch tw=120
set list listchars=tab:\|\ ,trail:.
set laststatus=2
syntax on

" other stuff
set matchtime=2
let mapleader="\\"
let localleader=","
set sessionoptions-=options

" latex should be default
let g:tex_flavor = "latex"

" vim-plug
call plug#begin('~/.vim/plugged')

Plug 'Shougo/vimproc.vim',          { 'do': 'make' }

" completion plugin
if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do' : ':UpdateRemotePlugins' }
  let g:deoplete#enable_at_startup = 1
  " Plug 'neovim/nvim-lspconfig'
  " set omnifunc=v:lua.vim.lsp.omnifunc
else
  " mucomplete
  Plug 'lifepillar/vim-mucomplete'
endif

" a completion plugin also needs an LSP source
Plug 'autozimu/LanguageClient-neovim', {
  \ 'branch': 'next',
  \ 'do': 'bash install.sh',
\ }

let g:LanguageClient_useVirtualText = "No"
let g:LanguageClient_hoverMarginSize = 0

" setup language servers
let g:LanguageClient_serverCommands = {
  \ 'c'       : ['clangd'],
  \ 'cpp'     : ['clangd'],
  \ 'haskell' : ['hie'],
  \ 'rust'    : {
    \ 'name'  : 'rust-analyzer',
    \ 'command': ['rustup', 'run', 'nightly', 'rust-analyzer'],
    \ 'initializationOptions': {
      \ 'cargo': {
        \ 'loadOutDirsFromCheck': v:true
      \ },
      \ 'procMacro': {
        \ 'enable': v:true
      \ },
      \ 'diagnostics': {
        \ 'disabled': [ 'use-field-shorthand' ]
      \ },
    \ }
  \ }
\ }

" (Optional) Multi-entry selection UI.
Plug 'junegunn/fzf', { 'dir' : '~/.fzf', 'do' : './install --bin' }

" echos docstrings
Plug 'Shougo/echodoc'
if has('nvim')
  let g:echodoc#type = 'floating'
else
  let g:echodoc#type = "echo"
  set cmdheight=2
endif
let g:echodoc#enable_at_startup = 1

" language plugins
Plug 'itchyny/vim-haskell-indent',  { 'for': 'haskell'  } " make sure to load vim-haskell-indent before haskell-vim
Plug 'neovimhaskell/haskell-vim',   { 'for': 'haskell'  }
Plug 'petRUShka/vim-sage',          { 'for': 'sage'     }
Plug 'idris-hackers/idris-vim',     { 'for': 'idris'    }
Plug 'rust-lang/rust.vim',          { 'for': 'rust'     }
let g:rust_recommended_style = 0
Plug 'cespare/vim-toml',            { 'for': 'toml'     }
Plug 'stephpy/vim-yaml',            { 'for': 'yaml'     }
Plug 'plasticboy/vim-markdown',     { 'for': 'markdown' }

Plug 'chriskempson/base16-vim'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
let g:surround_no_mappings = 1
let b:surround_indent = 0

" :Bd to close buffers without closing the window
Plug 'moll/vim-bbye'

Plug 'sotte/presenting.vim'

Plug 'ctrlpvim/ctrlp.vim',          { 'on': 'CtrlP' }
Plug 'scrooloose/nerdtree',         { 'on': 'NERDTreeToggle' }
Plug 'godlygeek/tabular',           { 'on': 'Tabularize' }
let g:haskell_tabular = 1

call plug#end()

" tab navigation
function! TabSwitch(tabnum)
  call feedkeys(a:tabnum . "gt", "n")
endfunction
command! -nargs=1 TabSwitch :call TabSwitch(<f-args>)
nnoremap <C-x><C-t>          :TabSwitch<SPACE>
nnoremap <C-x>t              :TabSwitch<SPACE>

filetype plugin indent on

set viewoptions-=options

" folding settings
set foldmethod=indent   " fold based on indent
set foldnestmax=16      " deepest fold is 16 levels
set nofoldenable        " don't fold by default
set foldlevel=100       " yay

" number formats
set nf=alpha,octal,hex
nnoremap <C-x> <nop>
nnoremap <C-d> <C-x>

" autocmd stuff
if has("autocmd")
  " Set scripts to be executable from the shell
  augroup shell_execute
    autocmd!
    autocmd BufWritePost * if getline(1) =~ "^#!" | if getline(1) =~ "/bin/" | silent execute "!chmod +x %" | endif | endif
    autocmd BufWritePost * if getline(1) =~ "^#!" | if getline(1) =~ "zsh" | silent execute "setfiletype zsh" | endif | endif
  augroup END

  " save/restore views when exiting/entering vim
  augroup buffer_view
    autocmd!
    autocmd BufWrite * mkview
    autocmd BufRead * silent! loadview
  augroup END

  " tags the textwidth + 1 column to ColorColumn and highlights it white
  function ColorColumn()
    let l:color_fmt = printf("\\%%%dv", &textwidth + 1)
    if exists("w:color_id")
      call matchdelete(w:color_id)
      call matchadd('ColorColumn', l:color_fmt, 100, w:color_id)
    else
      let w:color_id = matchadd('ColorColumn', l:color_fmt, 100)
    endif
  endfunction

  augroup color_column
    autocmd!
    autocmd BufEnter,WinEnter * call ColorColumn()
    autocmd OptionSet textwidth call ColorColumn()
  augroup END

  " textwidth on tex should be 80
  augroup text_width
    autocmd!
    autocmd FileType tex setlocal textwidth=80
  augroup END

  " some markdown stuff
  augroup markdown
    autocmd!
    autocmd FileType markdown
      \ setlocal formatoptions-=q |
      \ setlocal formatlistpat=^\\s*\\d\\+\\.\\s\\+\\\|^\\s*\[-*+]\\s\\+
  augroup END

  " language server goodies
  function SetLSPShortcuts()
    if has_key(g:LanguageClient_serverCommands, &filetype)
      nmap <buffer> <silent> <leader><F5> <Plug>(lcn-menu)
      nmap <buffer> <silent> <leader>ca   <Plug>(lcn-codeAction)
      nmap <buffer> <silent> <leader>gd   <Plug>(lcn-definition)
      nmap <buffer> <silent> <leader>gi   <Plug>(lcn-implementation)
      nmap <buffer> <silent> <leader>xx   <Plug>(lcn-references)
      nmap <buffer> <silent> <leader>K    <Plug>(lcn-hover)
      nmap <buffer> <silent> K            <Plug>(lcn-hover)
      nmap <buffer> <silent> <leader>dd   <Plug>(lcn-explain-error)
      nmap <buffer> <silent> <leader>d[   <Plug>(lcn-diagnostics-next)
      nmap <buffer> <silent> <leader>d]   <Plug>(lcn-diagnostics-prev)
      nmap <buffer> <silent> <leader>ff   <Plug>(lcn-format)
    endif
  endfunction

  augroup lsp
    autocmd!
    autocmd FileType * call SetLSPShortcuts()
  augroup END

  augroup completion
    autocmd!
    autocmd CompleteDone * pclose
  augroup END

  augroup colorschemes
    autocmd!
    " disable background highlighting for SpellBad, etc, because underlines are enough
    " we have to do this after we :colorscheme because most colorschemes call :hi clear which will reset the
    " highlighting back to the defaults, and if a colorscheme does not touch the background, it can cause conflicts with
    " linters that utilize SpellBad, etc
    autocmd ColorScheme * hi SpellBad    ctermbg=NONE
    autocmd ColorScheme * hi SpellCap    ctermbg=NONE
    autocmd ColorScheme * hi SpellRare   ctermbg=NONE
    autocmd ColorScheme * hi SpellLocal  ctermbg=NONE

    " also reset the ColorColumn
    autocmd ColorScheme * hi ColorColumn ctermbg=white
  augroup END
endif

" function to delete trailing whitespace
function! KillWhiteThings()
  let save_cursor = getpos(".")
  :silent! %s#\($\n\s*\)\+\%$##
  :silent! %s/\s\+$//g
  call setpos('.', save_cursor)
endfunction

" KEYBINDS YAY

" funciton keys
nnoremap <silent> <F1>   :call KillWhiteThings()<CR>
nnoremap <silent> <F2>   :set hlsearch! hlsearch?<CR>

" reflow bindings
nnoremap Q               gqgq
vnoremap Q               gq

" switch files with arrow keys
nnoremap <silent> <DOWN> :bnext<CR>
nnoremap <silent> <UP>   :bprev<CR>

" tabs
nnoremap <C-t>           :tabnew<SPACE>
let g:newtab_command = ":tabnew\<CR>"
nnoremap <silent> <C-y>  @=g:newtab_command<CR>
nnoremap <S-TAB>         gt

" map space to executing the q macro for easy qq recording
nnoremap <SPACE>         @q

" save shortcut
nnoremap <C-s>           :w!<CR>

" split workflow
nnoremap <C-h>           <C-w>h
nnoremap <C-j>           <C-w>j
nnoremap <C-k>           <C-w>k
nnoremap <C-l>           <C-w>l
nnoremap <leader>-       <C-w>-
nnoremap <leader>=       <C-w>+
" because we remmaped <C-l>
nnoremap <leader><C-l>   <C-l>

" scroll up to <C-q> (don't need this to be visual block)
" now <C-q> and <C-e> are scroll up/down
nnoremap <C-q>           <C-y>

" this helps with long lines
nnoremap j  gj
nnoremap k  gk
nnoremap gj j
nnoremap gk k
vnoremap j  gj
vnoremap k  gk
vnoremap gj j
vnoremap gk k

" convenience because : is used so much more than ;
nnoremap ; :
nnoremap : ;
vnoremap ; :
vnoremap : ;

" nobody uses normal visual mode anyway
nnoremap    v  <C-V>
nnoremap <C-V>    v
vnoremap    v  <C-V>
vnoremap <C-V>    v

" leader command section
nnoremap <silent> <leader>so      :so<SPACE>%<CR>
nnoremap <silent> <leader>vc      :e<SPACE>~/.vim/vimrc<CR>
nnoremap <silent> <leader>la      :e<SPACE>~/texmf/tex/latex/incertia/incertia.sty<CR>

" this adds a semicolon to the current line
nnoremap <silent> <leader>;       m`A;<ESC>``

nnoremap <silent> <leader>n  :NERDTreeToggle<CR>

" tab bindings
nnoremap <leader>1          1gt
nnoremap <leader>2          2gt
nnoremap <leader>3          3gt
nnoremap <leader>4          4gt
nnoremap <leader>5          5gt
nnoremap <leader>6          6gt
nnoremap <leader>7          7gt
nnoremap <leader>8          8gt
nnoremap <leader>9          9gt
nnoremap <silent> <leader>0 :tablast<CR>

let g:tabmoveleft_cmd  = ":-tabmove\<CR>"
let g:tabmoveright_cmd = ":+tabmove\<CR>"
nnoremap <silent> <leader>hh @=g:tabmoveleft_cmd<CR>
nnoremap <silent> <leader>ll @=g:tabmoveright_cmd<CR>
nnoremap <leader>j           gt
nnoremap <leader>k           gT

" surround.vim
nmap <leader>ds  <Plug>Dsurround
nmap <leader>cs  <Plug>Csurround
nmap <leader>cS  <Plug>CSurround
nmap <leader>ys  <Plug>Ysurround
nmap <leader>yS  <Plug>YSurround
nmap <leader>yss <Plug>Yssurround
nmap <leader>ySs <Plug>YSsurround
nmap <leader>ySS <Plug>YSsurround
xmap <leader>S   <Plug>VSurround
xmap <leader>gS  <Plug>VgSurround

" haskell tabularize bindings
vnoremap a= :Tabularize /=<CR>
vnoremap a; :Tabularize /::<CR>
vnoremap a- :Tabularize /-><CR>

" CtrlP
nnoremap <silent> <C-p>             :<C-u>CtrlP<CR>
nnoremap <silent> <leader><C-p>     :<C-u>CtrlP<SPACE>$HOME<CR>

if has('nvim')
  " use <ESC> to get out of insert mode in neovim terminals
  tnoremap <ESC> <C-\><C-n>
endif

" set the colorscheme
if has("gui_running")
  set background=light
  set guioptions-=T
  set guioptions-=m
  set guifont=DejaVu\ Sans\ Mono\ for\ Powerline\ 9
endif

if filereadable(expand("~/.vimrc_background"))
  let base16colorspace=256
  source ~/.vimrc_background
endif

" enable powerline if it exists and we are not in a tty
if (!has('nvim') && !(&term=~'linux') && isdirectory(expand("~/.vim/powerline"))) || has("gui_running")
  set rtp+=~/.vim/powerline/powerline/bindings/vim/
endif

function! SynStack()
  for i1 in synstack(line("."), col("."))
    let i2 = synIDtrans(i1)
    let n1 = synIDattr(i1, "name")
    let n2 = synIDattr(i2, "name")
    echo n1 "->" n2
  endfor
endfunction
